from flask import Flask, abort, send_file
import re
import requests as requests
from io import BytesIO
from PIL import Image
import json
from math import sqrt
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff_matrix import delta_e_cie2000
from numba import jit
import numba
import numpy as np
from skimage import color
from skimage.util import img_as_float

delta_e_cie2000_jit = jit(delta_e_cie2000)#signature_or_function=(numba.float32[:], numba.float32[:,:]))

hexKey = [( 68, 4, 6, "440406" ), ( 169, 48, 159, "a9309f" ), ( 225, 227, 227, "e1e3e3" ), ( 143, 139, 124, "8f8b7c" ), ( 53, 57, 157, "35399d" ), ( 225, 230, 170, "e1e6aa" ), ( 122, 122, 122, "7a7a7a" ), ( 166, 85, 29, "a6551d" ), ( 119, 106, 85, "776a55" ), ( 109, 48, 152, "6d3098" ), ( 172, 200, 190, "acc8be" ), ( 160, 158, 63, "a09e3f" ), ( 154, 147, 91, "9a935b" ), ( 76, 81, 84, "4c5154" ), ( 118, 118, 118, "767676" ), ( 207, 213, 214, "cfd5d6" ), ( 169, 91, 51, "a95b33" ), ( 52, 40, 23, "342817" ), ( 239, 251, 251, "effbfb" ), ( 54, 57, 61, "36393d" ), ( 221, 223, 165, "dddfa5" ), ( 231, 227, 219, "e7e3db" ), ( 44, 46, 143, "2c2e8f" ), ( 97, 219, 213, "61dbd5" ), ( 141, 106, 83, "8d6a53" ), ( 111, 99, 105, "6f6369" ), ( 249, 236, 78, "f9ec4e" ), ( 111, 54, 52, "6f3634" ), ( 141, 146, 99, "8d9263" ), ( 165, 194, 245, "a5c2f5" ), ( 117, 142, 67, "758e43" ), ( 121, 42, 172, "792aac" ), ( 186, 133, 35, "ba8523" ), ( 94, 164, 208, "5ea4d0" ), ( 103, 117, 52, "677534" ), ( 81, 217, 117, "51d975" ), ( 219, 219, 219, "dbdbdb" ), ( 76, 83, 42, "4c532a" ), ( 25, 26, 31, "191a1f" ), ( 103, 121, 103, "677967" ), ( 205, 201, 177, "cdc9b1" ), ( 96, 59, 31, "603b1f" ), ( 78, 62, 41, "4e3e29" ), ( 103, 77, 46, "674d2e" ), ( 142, 32, 32, "8e2020" ), ( 74, 59, 91, "4a3b5b" ), ( 168, 54, 50, "a83632" ), ( 47, 64, 139, "2f408b" ), ( 154, 154, 148, "9a9a94" ), ( 144, 166, 167, "90a6a7" ), ( 59, 87, 75, "3b574b" ), ( 130, 131, 131, "828383" ), ( 195, 179, 123, "c3b37b" ), ( 149, 88, 108, "95586c" ), ( 162, 197, 55, "a2c537" ), ( 113, 108, 137, "716c89" ), ( 102, 112, 134, "667086" ), ( 21, 137, 145, "158991" ), ( 150, 92, 66, "965c42" ), ( 143, 118, 69, "8f7645" ), ( 170, 126, 170, "aa7eaa" ), ( 125, 125, 125, "7d7d7d" ), ( 224, 97, 0, "e06100" ), ( 57, 42, 35, "392a23" ), ( 237, 141, 172, "ed8dac" ), ( 234, 192, 88, "eac058" ), ( 96, 96, 96, "606060" ), ( 102, 81, 49, "665131" ), ( 90, 63, 28, "5a3f1c" ), ( 207, 204, 194, "cfccc2" ), ( 120, 200, 101, "78c865" ), ( 236, 233, 226, "ece9e2" ), ( 156, 127, 78, "9c7f4e" ), ( 248, 197, 39, "f8c527" ), ( 160, 39, 34, "a02722" ), ( 206, 206, 201, "cecec9" ), ( 188, 212, 202, "bcd4ca" ), ( 224, 220, 200, "e0dcc8" ), ( 228, 153, 181, "e499b5" ), ( 153, 129, 89, "998159" ), ( 134, 65, 25, "864119" ), ( 219, 211, 161, "dbd3a1" ), ( 20, 21, 25, "141519" ), ( 118, 70, 86, "764656" ), ( 168, 139, 16, "a88b10" ), ( 192, 83, 184, "c053b8" ), ( 87, 67, 26, "57431a" ), ( 83, 90, 93, "535a5d" ), ( 37, 22, 16, "251610" ), ( 96, 96, 96, "606060" ), ( 132, 107, 107, "846b6b" ), ( 83, 83, 83, "535353" ), ( 202, 171, 120, "caab78" ), ( 67, 30, 32, "431e20" ), ( 131, 55, 177, "8337b1" ), ( 73, 91, 36, "495b24" ), ( 135, 106, 97, "876a61" ), ( 74, 180, 213, "4ab4d5" ), ( 77, 51, 35, "4d3323" ), ( 154, 125, 77, "9a7d4d" ), ( 104, 81, 48, "685130" ), ( 8, 10, 15, "080a0f" ), ( 115, 115, 115, "737373" ), ( 126, 124, 122, "7e7c7a" ), ( 153, 118, 73, "997649" ), ( 117, 6, 7, "750607" ), ( 158, 164, 176, "9ea4b0" ), ( 219, 211, 160, "dbd3a0" ), ( 58, 175, 217, "3aafd9" ), ( 105, 99, 89, "696359" ), ( 235, 154, 181, "eb9ab5" ), ( 157, 116, 18, "9d7412" ), ( 146, 99, 86, "926356" ), ( 233, 236, 236, "e9ecec" ), ( 171, 27, 9, "ab1b09" ), ( 197, 120, 23, "c57817" ), ( 143, 61, 46, "8f3d2e" ), ( 218, 210, 158, "dad29e" ), ( 141, 145, 36, "8d9124" ), ( 161, 78, 78, "a14e4e" ), ( 135, 130, 126, "87827e" ), ( 18, 18, 18, "121212" ), ( 183, 183, 185, "b7b7b9" ), ( 153, 113, 98, "997162" ), ( 216, 209, 157, "d8d19d" ), ( 194, 195, 84, "c2c354" ), ( 184, 166, 121, "b8a679" ), ( 70, 43, 26, "462b1a" ), ( 240, 118, 19, "f07613" ), ( 35, 137, 198, "2389c6" ), ( 125, 84, 53, "7d5435" ), ( 106, 170, 150, "6aaa96" ), ( 166, 121, 166, "a679a6" ), ( 112, 185, 25, "70b919" ), ( 84, 64, 51, "544033" ), ( 179, 179, 182, "b3b3b6" ), ( 213, 101, 142, "d5658e" ), ( 208, 100, 191, "d064bf" ), ( 114, 119, 106, "72776a" ), ( 100, 31, 156, "641f9c" ), ( 118, 118, 118, "767676" ), ( 154, 110, 77, "9a6e4d" ), ( 119, 85, 59, "77553b" ), ( 84, 109, 27, "546d1b" ), ( 94, 168, 24, "5ea818" ), ( 129, 140, 143, "818c8f" ), ( 38, 67, 137, "264389" ), ( 122, 122, 122, "7a7a7a" ), ( 114, 71, 40, "724728" ), ( 189, 68, 179, "bd44b3" ), ( 134, 96, 67, "866043" ), ( 232, 199, 54, "e8c736" ), ( 20, 18, 29, "14121d" ), ( 99, 160, 143, "63a08f" ), ( 159, 114, 98, "9f7262" ), ( 62, 68, 71, "3e4447" ), ( 70, 73, 166, "4649a6" ), ( 154, 91, 64, "9a5b40" ), ( 61, 39, 18, "3d2712" ), ( 133, 133, 134, "858586" ), ( 44, 22, 26, "2c161a" ), ( 21, 119, 136, "157788" ), ( 142, 142, 134, "8e8e86" ), ( 125, 189, 41, "7dbd29" ), ( 231, 228, 220, "e7e4dc" ), ( 227, 131, 31, "e3831f" ), ( 86, 91, 91, "565b5b" ), ( 182, 37, 36, "b62524" ), ( 100, 67, 50, "644332" ), ( 109, 128, 116, "6d8074" ), ( 212, 205, 148, "d4cd94" ), ( 45, 28, 12, "2d1c0c" ), ( 161, 83, 37, "a15325" ), ( 125, 84, 79, "7d544f" ), ( 240, 175, 21, "f0af15" ), ( 159, 159, 159, "9f9f9f" ), ( 52, 118, 125, "34767d" ), ( 97, 119, 44, "61772c" ), ( 181, 59, 53, "b53b35" ), ( 209, 178, 161, "d1b2a1" ), ( 169, 88, 33, "a95821" ), ( 100, 67, 50, "644332" ), ( 215, 208, 154, "d7d09a" ), ( 125, 125, 115, "7d7d73" ), ( 107, 88, 57, "6b5839" ), ( 36, 147, 157, "24939d" ) ]

rgbValues = (( 68, 4, 6 ), ( 169, 48, 159 ), ( 225, 227, 227 ), ( 143, 139, 124 ), ( 53, 57, 157 ), ( 225, 230, 170 ), ( 122, 122, 122 ), ( 166, 85, 29 ), ( 119, 106, 85 ), ( 109, 48, 152 ), ( 172, 200, 190 ), ( 160, 158, 63 ), ( 154, 147, 91 ), ( 76, 81, 84 ), ( 118, 118, 118 ), ( 207, 213, 214 ), ( 169, 91, 51 ), ( 52, 40, 23 ), ( 239, 251, 251 ), ( 54, 57, 61 ), ( 221, 223, 165 ), ( 231, 227, 219 ), ( 44, 46, 143 ), ( 97, 219, 213 ), ( 141, 106, 83 ), ( 111, 99, 105 ), ( 249, 236, 78 ), ( 111, 54, 52 ), ( 141, 146, 99 ), ( 165, 194, 245 ), ( 117, 142, 67 ), ( 121, 42, 172 ), ( 186, 133, 35 ), ( 94, 164, 208 ), ( 103, 117, 52 ), ( 81, 217, 117 ), ( 219, 219, 219 ), ( 76, 83, 42 ), ( 25, 26, 31 ), ( 103, 121, 103 ), ( 205, 201, 177 ), ( 96, 59, 31 ), ( 78, 62, 41 ), ( 103, 77, 46 ), ( 142, 32, 32 ), ( 74, 59, 91 ), ( 168, 54, 50 ), ( 47, 64, 139 ), ( 154, 154, 148 ), ( 144, 166, 167 ), ( 59, 87, 75 ), ( 130, 131, 131 ), ( 195, 179, 123 ), ( 149, 88, 108 ), ( 162, 197, 55 ), ( 113, 108, 137 ), ( 102, 112, 134 ), ( 21, 137, 145 ), ( 150, 92, 66 ), ( 143, 118, 69 ), ( 170, 126, 170 ), ( 125, 125, 125 ), ( 224, 97, 0 ), ( 57, 42, 35 ), ( 237, 141, 172 ), ( 234, 192, 88 ), ( 96, 96, 96 ), ( 102, 81, 49 ), ( 90, 63, 28 ), ( 207, 204, 194 ), ( 120, 200, 101 ), ( 236, 233, 226 ), ( 156, 127, 78 ), ( 248, 197, 39 ), ( 160, 39, 34 ), ( 206, 206, 201 ), ( 188, 212, 202 ), ( 224, 220, 200 ), ( 228, 153, 181 ), ( 153, 129, 89 ), ( 134, 65, 25 ), ( 219, 211, 161 ), ( 20, 21, 25 ), ( 118, 70, 86 ), ( 168, 139, 16 ), ( 192, 83, 184 ), ( 87, 67, 26 ), ( 83, 90, 93 ), ( 37, 22, 16 ), ( 96, 96, 96 ), ( 132, 107, 107 ), ( 83, 83, 83 ), ( 202, 171, 120 ), ( 67, 30, 32 ), ( 131, 55, 177 ), ( 73, 91, 36 ), ( 135, 106, 97 ), ( 74, 180, 213 ), ( 77, 51, 35 ), ( 154, 125, 77 ), ( 104, 81, 48 ), ( 8, 10, 15 ), ( 115, 115, 115 ), ( 126, 124, 122 ), ( 153, 118, 73 ), ( 117, 6, 7 ), ( 158, 164, 176 ), ( 219, 211, 160 ), ( 58, 175, 217 ), ( 105, 99, 89 ), ( 235, 154, 181 ), ( 157, 116, 18 ), ( 146, 99, 86 ), ( 233, 236, 236 ), ( 171, 27, 9 ), ( 197, 120, 23 ), ( 143, 61, 46 ), ( 218, 210, 158 ), ( 141, 145, 36 ), ( 161, 78, 78 ), ( 135, 130, 126 ), ( 18, 18, 18 ), ( 183, 183, 185 ), ( 153, 113, 98 ), ( 216, 209, 157 ), ( 194, 195, 84 ), ( 184, 166, 121 ), ( 70, 43, 26 ), ( 240, 118, 19 ), ( 35, 137, 198 ), ( 125, 84, 53 ), ( 106, 170, 150 ), ( 166, 121, 166 ), ( 112, 185, 25 ), ( 84, 64, 51 ), ( 179, 179, 182 ), ( 213, 101, 142 ), ( 208, 100, 191 ), ( 114, 119, 106 ), ( 100, 31, 156 ), ( 118, 118, 118 ), ( 154, 110, 77 ), ( 119, 85, 59 ), ( 84, 109, 27 ), ( 94, 168, 24 ), ( 129, 140, 143 ), ( 38, 67, 137 ), ( 122, 122, 122 ), ( 114, 71, 40 ), ( 189, 68, 179 ), ( 134, 96, 67 ), ( 232, 199, 54 ), ( 20, 18, 29 ), ( 99, 160, 143 ), ( 159, 114, 98 ), ( 62, 68, 71 ), ( 70, 73, 166 ), ( 154, 91, 64 ), ( 61, 39, 18 ), ( 133, 133, 134 ), ( 44, 22, 26 ), ( 21, 119, 136 ), ( 142, 142, 134 ), ( 125, 189, 41 ), ( 231, 228, 220 ), ( 227, 131, 31 ), ( 86, 91, 91 ), ( 182, 37, 36 ), ( 100, 67, 50 ), ( 109, 128, 116 ), ( 212, 205, 148 ), ( 45, 28, 12 ), ( 161, 83, 37 ), ( 125, 84, 79 ), ( 240, 175, 21 ), ( 159, 159, 159 ), ( 52, 118, 125 ), ( 97, 119, 44 ), ( 181, 59, 53 ), ( 209, 178, 161 ), ( 169, 88, 33 ), ( 100, 67, 50 ), ( 215, 208, 154 ), ( 125, 125, 115 ), ( 107, 88, 57 ), ( 36, 147, 157 ) )

app = Flask(__name__)

hexDict = {}

newHexKey = []

for i in range(len(hexKey)):
    if (len(hexKey[i]) == 1):
        print(hexKey[i])
    r, g, b, _ = hexKey[i]
    newcol = convert_color(sRGBColor(r, g, b), LabColor).get_value_tuple()
    newHexKey.append( [newcol[0], newcol[1], newcol[2]])
    hexDict[(newcol[0], newcol[1], newcol[2])] = hexKey[i][3]

newHexKey = np.array(newHexKey)

print(newHexKey.shape)

letter = 'a'

headers = {
    'User-Agent': 'MinecraftOsmApiLayer 1.1',
    'From': 'xboxbedrock@gmail.com'
}

def rgb2lab ( inputColor ) :

   inputColor = [inputColor[0], inputColor[1], inputColor[2]]

   num = 0
   RGB = [0, 0, 0]

   for value in inputColor :
       value = float(value) / 255

       if value > 0.04045 :
           value = ( ( value + 0.055 ) / 1.055 ) ** 2.4
       else :
           value = value / 12.92

       RGB[num] = value * 100
       num = num + 1

   XYZ = [0, 0, 0,]

   X = RGB [0] * 0.4124 + RGB [1] * 0.3576 + RGB [2] * 0.1805
   Y = RGB [0] * 0.2126 + RGB [1] * 0.7152 + RGB [2] * 0.0722
   Z = RGB [0] * 0.0193 + RGB [1] * 0.1192 + RGB [2] * 0.9505
   XYZ[ 0 ] = round( X, 4 )
   XYZ[ 1 ] = round( Y, 4 )
   XYZ[ 2 ] = round( Z, 4 )

   XYZ[ 0 ] = float( XYZ[ 0 ] ) / 95.047         # ref_X =  95.047   Observer= 2°, Illuminant= D65
   XYZ[ 1 ] = float( XYZ[ 1 ] ) / 100.0          # ref_Y = 100.000
   XYZ[ 2 ] = float( XYZ[ 2 ] ) / 108.883        # ref_Z = 108.883

   num = 0
   for value in XYZ :

       if value > 0.008856 :
           value = value ** ( 0.3333333333333333 )
       else :
           value = ( 7.787 * value ) + ( 16 / 116 )

       XYZ[num] = value
       num = num + 1

   Lab = [0, 0, 0]

   L = ( 116 * XYZ[ 1 ] ) - 16
   a = 500 * ( XYZ[ 0 ] - XYZ[ 1 ] )
   b = 200 * ( XYZ[ 1 ] - XYZ[ 2 ] )

   Lab [ 0 ] = round( L, 4 )
   Lab [ 1 ] = round( a, 4 )
   Lab [ 2 ] = round( b, 4 )

   return Lab

rgbValues = list(sum(rgbValues, ()))*12
rgbValues = rgbValues[:768]
palimage = Image.new('P', (16, 16))
palimage.putpalette(rgbValues)

with open("colors.json") as json_file:
    colors = json.load(json_file)

def shuffleLetter(letter: str):
    if (letter == 'a') :
        return 'b'
    elif (letter == 'b'):
        return 'c'
    elif (letter == 'c'):
        return 'a'
    else:
        return 'a'

compared = {}
    
def nearest(rgb):
    if (rgb in compared):
        return compared[rgb]
    a = list(convert_color(sRGBColor(*rgb), LabColor).get_value_tuple())
    #a = list(color.rgb2lab (np.array([[*rgb]], dtype=np.uint8)))[0]
    #color_diffs = []
    #for color in hexKey:
    ##    
    #    color_diff = delta_e_cie2000(a, color[0])
    #    color_diffs.append((color_diff, color))
    dist = delta_e_cie2000_jit(a, newHexKey)
    closest = newHexKey[np.argmin(dist)]

    ans = [*closest, hexDict[tuple(closest)]]
    
    compared[rgb] = ans
    return ans


def quadKey(x, y, z):
    index = ""
    for i in range(z, 0, -1):
        b = 0
        mask = 1 << (i - 1)
        if ((x & mask) != 0): b +=1
        if ((y & mask) != 0): b += 2
        index += str(b)
    return index


blocksImg = Image.open('blocks.png')
blocksImg = blocksImg.convert('RGB')
blockspix = blocksImg.load()

print (blockspix)

def serve_pil_image(pil_img):
    img_io = BytesIO()
    pil_img.save(img_io, 'PNG')
    img_io.seek(0)
    return send_file(img_io, mimetype='image/png')



@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def index(path):

    global letter

    searched = re.search(r"([0-9]+)\/([0-9]+)\/([0-9])+\.png", path)
    if searched == None:
        return abort(404)
    z, x, y = path.rstrip(".png").split('/')
    print (searched)
    #tile = 	f'https://{letter}.tile.openstreetmap.org/{z}/{x}/{y}.png'

    tile = f'http://tiles.virtualearth.net/tiles/a{quadKey(int(x), int(y), int(z))}.jpeg?g=1398'

    letter = shuffleLetter(letter)

    try:
        response = requests.get(tile, headers=headers)
        if response.status_code != 200:
            return abort(404)

        im = Image.open(BytesIO(response.content))
        width, height = im.size
        ni = im.resize((int(width/16), int(height/16))) 

        #ni = ni.quantize(palette=palimage)

        ni = ni.convert("RGB")
        im = im.convert("RGB")

        pixels = ni.load()

        ipixels = im.load()

        for i in range(ni.size[0]):    # for every col:
            for j in range(ni.size[1]):    # For every row
                inHex = nearest(pixels[i,j])
                blockId = colors[inHex[3]]
                if (blockId[1] == None): print(blockId)
                for k in range(16):
                    for l in range(16):
                        ipixels[i*16+k, j*16+l] = tuple(blockspix[(blockId[0] * 16) + k, (blockId[1] * 16) + l])

        return serve_pil_image(im)

        
    except Exception as e:
        raise e
        print(e)
        return abort(404)

    

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')